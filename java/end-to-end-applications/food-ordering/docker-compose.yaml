version: '3'
services:
  broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://broker:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk

  init-kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - broker
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server broker:29092 --list
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic orders --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic driver-updates --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server broker:29092 --list
      "

  jaeger:
    image: jaegertracing/all-in-one:1.47
    ports:
      - "16686:16686"
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  restaurantpos:
    container_name: restaurantpos
    image: restaurant-app:1.0.0
    environment:
      - RESTATE_RUNTIME_ENDPOINT=http://runtime:8080
    ports:
      - "5050:5050"  # exposed so that can be called when delivery services run outside docker compose
    entrypoint: ["java", "-cp", "@/app/jib-classpath-file", "dev.restate.sdk.examples.RestaurantMain"]

  driver_app:
    container_name: driver_app
    image: delivery-service:1.0.0
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=broker:29092
    entrypoint: ["java", "-cp", "@/app/jib-classpath-file", "dev.restate.sdk.examples.external.DriverMobileAppSimulator"]

# To run the delivery services directly (in IDE, standalone), comment out this service
  delivery_service:
    container_name: delivery_service
    image: delivery-service:1.0.0
    environment:
      - RESTAURANT_ENDPOINT=http://restaurantpos:5050

  runtime:
    image: docker.io/restatedev/restate
    depends_on:
      - init-kafka
      - jaeger
    ports:
      - "9070:9070"
      - "9071:9071"
      - "8080:8080"
    volumes:
      - ./restate-docker.toml:/restate.toml:Z,ro
    environment:
      - RESTATE_CONFIG=/restate.toml
# remove those comments when running delivery services directly (in IDE, standalone), so the runtime can reach out to them
#    extra_hosts:
#      - "delivery_service:host-gateway"

  runtimesetup:
    build:
      context: ./tools
    depends_on:
      - runtime
      - driver_app
      - restaurantpos
    restart: "no"
    entrypoint: ["sh", "-c", "-x", "sleep 5 &&
    echo '-w \"\\n\"' >> ~/.curlrc &&
    curl -i -s --fail -X POST 'runtime:9070/deployments' -H 'content-type: application/json' -d '{\"uri\": \"http://delivery_service:9080\"}' &&
    curl -i -s --fail -X POST 'runtime:9070/deployments' -H 'content-type: application/json' -d '{\"uri\": \"http://driver_app:9081\"}' &&
    sleep 3 && 
    curl -i -s --fail -X POST 'runtime:9070/subscriptions' -H 'content-type: application/json' -d '{ \"source\":\"kafka://my-cluster/orders\", \"sink\":\"service://OrderWorkflow/create\" }' &&
    curl -i -s --fail -X POST 'runtime:9070/subscriptions' -H 'content-type: application/json' -d '{ \"source\":\"kafka://my-cluster/driver-updates\", \"sink\":\"service://DriverDigitalTwin/handleDriverLocationUpdateEvent\" }' &&
    sleep 3 && 
    curl -i -s --fail -X POST 'runtime:8080/DriverMobileAppSimulator/driver-A/startDriver' &&
    curl -i -s --fail -X POST 'runtime:8080/DriverMobileAppSimulator/driver-B/startDriver' &&
    exit 1"]

  foodorderingwebui:
    build:
      context: ./webui
    depends_on:
      - runtimesetup
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_ENABLE_KAFKA=false
