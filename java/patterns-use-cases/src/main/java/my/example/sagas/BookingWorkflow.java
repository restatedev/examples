package my.example.sagas;

import dev.restate.sdk.WorkflowContext;
import dev.restate.sdk.annotation.Workflow;
import dev.restate.sdk.endpoint.Endpoint;
import dev.restate.sdk.http.vertx.RestateHttpServer;
import dev.restate.sdk.common.TerminalException;
import my.example.sagas.activities.CarRentalService;
import my.example.sagas.activities.CarRentalServiceClient; // Client for Restate service; generated by Restate SDK
import my.example.sagas.activities.FlightService;
import my.example.sagas.activities.FlightServiceClient; // Client for Restate service; generated by Restate SDK
import my.example.sagas.activities.PaymentClient;

import java.util.ArrayList;
import java.util.List;

/*
Trip reservation workflow using sagas:
Restate infinitely retries failures, and recovers previous progress.
But for some types of failures (terminal exceptions), we don't want to retry but want to undo the previous actions and finish.

Restate guarantees the execution of your code. This makes it very easy to implement sagas.
We execute actions, and keep track of a list of undo actions.
When a terminal exception occurs, Restate ensures execution of all compensations.

+------ Initialize compensations list ------+
                     |
                     v
+------------------ Try --------------------+
| 1. Reserve Flights & Register Undo        |
| 2. Reserve Car & Register Undo            |
| 3. Generate Payment ID & Register Refund  |
| 4. Perform Payment                        |
| 5. Confirm Flight Reservation             |
| 6. Confirm Car Reservation                |
+------------------ Catch ------------------+
| If TerminalException:                         |
|   Execute compensations in reverse order  |
| Rethrow error                             |
+--------------------------------------------+

Note: that the compensation logic is purely implemented in user code (no special Restate API)
 */
@Workflow
public class BookingWorkflow {

  public record BookingRequest(
          FlightService.FlightBookingRequest flights,
          CarRentalService.CarRentalRequest car,
          PaymentClient.PaymentInfo paymentInfo
  ) {}

  @Workflow
  public void run(WorkflowContext ctx, BookingRequest req) throws TerminalException {
    // Create a list of undo actions
    List<Runnable> compensations = new ArrayList<>();

    try {
      // Reserve the flights; Restate remembers the reservation ID
      // This sends an HTTP request via Restate to the Restate flights service
      var flightsRpcClient = FlightServiceClient.fromContext(ctx);
      String flightBookingId = flightsRpcClient.reserve(req.flights()).await();
      // Use the flightBookingId to register the undo action for the flight reservation,
      // or later confirm the reservation.
      compensations.add(() -> flightsRpcClient.cancel(flightBookingId).await());

      // Reserve the car; Restate remembers the reservation ID
      var carRentalRpcClient = CarRentalServiceClient.fromContext(ctx);
      String carBookingId = carRentalRpcClient.reserve(req.car()).await();
      // Register the undo action for the car rental.
      compensations.add(() -> carRentalRpcClient.cancel(carBookingId).await());

      // Charge the payment; Generate a payment ID and store it in Restate
      String paymentId = ctx.random().nextUUID().toString();
      // Register the refund as a compensation, using the idempotency key
      compensations.add(() -> ctx.run(() -> PaymentClient.refund(paymentId)));
      // Do the payment using the paymentId as idempotency key
      ctx.run(() -> PaymentClient.charge(req.paymentInfo(), paymentId));

      // Confirm the flight and car reservations
      flightsRpcClient.confirm(flightBookingId).await();
      carRentalRpcClient.confirm(carBookingId).await();

    }
    // Terminal errors tell Restate not to retry, but to compensate and fail the workflow
    catch (TerminalException e) {
      // Undo all the steps up to this point by running the compensations
      // Restate guarantees that all compensations are executed
      for (Runnable compensation : compensations) {
        compensation.run();
      }

      // Rethrow error to fail this workflow
      throw e;
    }
  }

  public static void main(String[] args) {
    RestateHttpServer.listen(
      Endpoint
        .bind(new BookingWorkflow())
        .bind(new CarRentalService())
        .bind(new FlightService())
    );
  }
}
